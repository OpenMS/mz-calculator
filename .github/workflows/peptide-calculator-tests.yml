name: Peptide Calculator Tests

on:
  push:
    branches: [ "main", "week-*" ]
    paths: 
      - 'src/peptide_calculator.py'
      - 'tests/test_*.py'
      - 'content/quickstart.py'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/peptide_calculator.py'
      - 'tests/test_*.py'
      - 'content/quickstart.py'
  workflow_dispatch:

jobs:
  peptide-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-peptide-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-peptide-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-benchmark
    
    - name: Run peptide calculator unit tests
      run: |
        pytest tests/test_calculation.py -v --cov=src.peptide_calculator
        pytest tests/test_validation.py -v --cov=src.peptide_calculator --cov-append
        pytest tests/test_parsing.py -v --cov=src.peptide_calculator --cov-append
        pytest tests/test_modifications.py -v --cov=src.peptide_calculator --cov-append
      env:
        PYTHONPATH: .
    
    - name: Run integration tests
      run: |
        pytest tests/test_integration_comprehensive.py -v
      env:
        PYTHONPATH: .
    
    - name: Run analysis utilities tests
      run: |
        pytest tests/test_analysis_utilities.py -v
      env:
        PYTHONPATH: .
    
    - name: Run workflow tests
      run: |
        pytest tests/test_topp_workflow_parameter.py -v
      env:
        PYTHONPATH: .
    
    - name: Test peptide calculator performance
      run: |
        python -c "
        import sys
        import time
        sys.path.insert(0, '.')
        from src.peptide_calculator import calculate_peptide_mz
        
        # Performance test
        start = time.time()
        for i in range(100):
            result = calculate_peptide_mz('PEPTIDE', 2)
            assert result['success'] == True
        end = time.time()
        
        avg_time = (end - start) / 100
        print(f'Average calculation time: {avg_time:.4f}s')
        assert avg_time < 0.1, f'Performance regression: {avg_time}s > 0.1s'
        "
    
    - name: Test edge cases and error handling
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        from src.peptide_calculator import calculate_peptide_mz, validate_peptide_sequence
        
        # Test edge cases
        try:
            calculate_peptide_mz('', 2)
            assert False, 'Should raise error for empty sequence'
        except ValueError:
            pass
        
        try:
            calculate_peptide_mz('INVALIDX', 0)
            assert False, 'Should raise error for invalid charge'
        except ValueError:
            pass
        
        # Test validation
        valid, clean = validate_peptide_sequence('PEPTIDE')
        assert valid == True
        assert clean == 'PEPTIDE'
        
        valid, clean = validate_peptide_sequence('PEPT1DE')
        assert valid == False
        
        print('All edge case tests passed!')
        "
    
    - name: Test ProForma and UNIMOD support
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        from src.peptide_calculator import calculate_peptide_mz
        
        # Test ProForma arbitrary mass shifts
        result1 = calculate_peptide_mz('PEPTIDE[+15.9949]', 2)
        assert result1['success'] == True
        print(f'ProForma test: {result1[\"mz_ratio\"]:.4f}')
        
        # Test UNIMOD notation
        result2 = calculate_peptide_mz('C[UNIMOD:4]PEPTIDE', 2)
        assert result2['success'] == True
        print(f'UNIMOD test: {result2[\"mz_ratio\"]:.4f}')
        
        # Test charge notation
        result3 = calculate_peptide_mz('PEPTIDE/3', 2)
        assert result3['success'] == True
        assert result3['charge_state'] == 3
        print(f'Charge notation test: charge={result3[\"charge_state\"]}')
        
        print('All advanced notation tests passed!')
        "
    
    - name: Generate test coverage report
      if: matrix.python-version == '3.10'
      run: |
        pytest tests/test_*.py --cov=src.peptide_calculator --cov-report=html --cov-report=xml
    
    - name: Upload coverage to artifacts
      if: matrix.python-version == '3.10'
      uses: actions/upload-artifact@v4
      with:
        name: peptide-calculator-coverage
        path: |
          htmlcov/
          coverage.xml

  functional-tests:
    runs-on: ubuntu-latest
    needs: peptide-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium pytest
        sudo apt-get update
        sudo apt-get install -y chromium-browser xvfb
    
    - name: Run GUI tests
      run: |
        pytest test_gui.py -v
      env:
        PYTHONPATH: .
    
    - name: Test Streamlit app functionality
      run: |
        # Start Streamlit app in background
        streamlit run content/quickstart.py --server.headless true --server.port 8501 &
        STREAMLIT_PID=$!
        
        # Wait for app to start
        sleep 10
        
        # Test if app is accessible
        curl -f http://localhost:8501 || exit 1
        
        # Kill Streamlit process
        kill $STREAMLIT_PID
        
        echo "Streamlit app functional test passed!"
      env:
        PYTHONPATH: .